generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model: Extended for RBAC with roleAssignments relation.
// Note: For NextAuth, this integrates with PrismaAdapter; roles/permissions are added for RBAC.
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  googleId      String?   @unique
  emailVerified DateTime?
  image         String?   // Profile image URL
  hashedPassword String?  // If using credentials provider
  isActive      Boolean   @default(true) // From your previous code, for active status

  accounts      Account[]
  sessions      Session[]
  donations     Donation[]
  roleAssignments RoleAssignment[] // Link to roles via assignments (many-to-many with soft delete)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete as in your previous code
}

// Account, Session, VerificationToken: Unchanged for NextAuth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Cause model: Updated with status fields (instead of separate open/closed booleans, use enum for status).
// Added showOnWebsite flag.
model Cause {
  id                    String    @id @default(uuid())
  name                  String    @unique
  shortDescription      String?
  description           String?
  goal                  Float
  raised                Float     @default(0)  // Can keep as is, but compute dynamically in API
  color                 String?
  fundUsage             String?   // New: e.g., "Direct support: 60%, Supplies: 40%" or JSON

  peopleHelped          Int       @default(0)
  projectsCompleted     Int       @default(0)
  communitiesImpacted   Int       @default(0)

  status                CauseStatus @default(OPEN)
  showOnWebsite         Boolean   @default(true)

  donations             Donation[]
  images                CauseImage[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? 

  @@index([name])
}

enum CauseStatus {
  OPEN
  CLOSED
}

// CauseImage: Unchanged
model CauseImage {
  id        String    @id @default(uuid())
  causeId   String
  url       String
  altText   String?
  isPrimary Boolean   @default(false)

  cause     Cause     @relation(fields: [causeId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Added for soft deletes

  @@index([causeId])
}

// Donation model: Unchanged, but add soft delete if needed (deletedAt: DateTime?)
model Donation {
  id               String    @id @default(uuid())
  userId           String?
  user             User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  name             String?
  email            String
  amount           Float
  message          String?
  batch            String?
  isAnonymous      Boolean   @default(false)
  causeId          String?
  cause            Cause?    @relation(fields: [causeId], references: [id], onDelete: SetNull)

  orderId          String?   @unique
  paymentId        String?   @unique
  paymentStatus    PaymentStatus?
  paymentMethod    String?
  paymentCapturedAt DateTime?
  receiptUrl    String?   

  date             DateTime  @default(now())

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime? // Optional soft delete

  @@index([userId])
  @@index([email])
  @@index([causeId])
  @@index([paymentStatus])
}

enum PaymentStatus {
  PENDING
  CAPTURED
  FAILED
  REFUNDED
}

// New models for RBAC, adapted from your previous project code
// Role: e.g., "ADMIN", "MODERATOR", "USER"
model Role {
  id                    String    @id @default(uuid())
  name                  String    @unique
  description           String?

  roleAssignments       RoleAssignment[]
  permissionAssignments PermissionAssignment[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? // Soft delete
}

// Permission: e.g., "CREATE_CAUSE", "UPDATE_DONATION", "VIEW_REPORTS"
model Permission {
  id                    String    @id @default(uuid())
  name                  String    @unique
  description           String?

  permissionAssignments PermissionAssignment[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? // Soft delete
}

// RoleAssignment: Links users to roles (many-to-many)
model RoleAssignment {
  id        String    @id @default(uuid())
  userId    String
  roleId    String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  @@unique([userId, roleId])
}

// PermissionAssignment: Links roles to permissions (many-to-many)
model PermissionAssignment {
  id            String    @id @default(uuid())
  roleId        String
  permissionId  String

  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete

  @@unique([roleId, permissionId])
}
