generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  googleId      String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  isActive      Boolean   @default(true)

  accounts      Account[]
  sessions      Session[]
  donations     Donation[]
  roleAssignments RoleAssignment[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@index([email])
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cause {
  id                    Int         @id @default(autoincrement())
  name                  String      @unique
  shortDescription      String?
  description           String?
  goal                  Float
  raised                Float       @default(0)
  color                 String?
  fundUsage             String?
  peopleHelped          Int         @default(0)
  projectsCompleted     Int         @default(0)
  communitiesImpacted   Int         @default(0)
  status                CauseStatus @default(OPEN)
  showOnWebsite         Boolean     @default(true)

  donations             Donation[]
  images                CauseImage[]

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deletedAt             DateTime?

  @@index([name])
}

enum CauseStatus {
  OPEN
  CLOSED
}

model CauseImage {
  id        Int       @id @default(autoincrement())
  causeId   Int
  url       String
  altText   String?
  isPrimary Boolean   @default(false)

  cause     Cause     @relation(fields: [causeId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([causeId])
}

model Donation {
  id               Int           @id @default(autoincrement())
  userId           Int?
  user             User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  name             String?
  email            String
  amount           Float
  message          String?
  batch            String?
  isAnonymous      Boolean       @default(false)
  causeId          Int?
  cause            Cause?        @relation(fields: [causeId], references: [id], onDelete: SetNull)
  orderId          String?       @unique
  paymentId        String?       @unique
  paymentStatus    PaymentStatus?
  paymentMethod    String?
  paymentCapturedAt DateTime?
  receiptUrl       String?
  date             DateTime      @default(now())

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  deletedAt        DateTime?

  @@index([userId])
  @@index([email])
  @@index([causeId])
  @@index([paymentStatus])
}

enum PaymentStatus {
  PENDING
  CAPTURED
  FAILED
  REFUNDED
}

model Role {
  id                    Int       @id @default(autoincrement())
  name                  String    @unique
  description           String?

  roleAssignments       RoleAssignment[]
  permissionAssignments PermissionAssignment[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?
}

model Permission {
  id                    Int       @id @default(autoincrement())
  name                  String    @unique
  description           String?

  permissionAssignments PermissionAssignment[]

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?
}

model RoleAssignment {
  id        Int       @id @default(autoincrement())
  userId    Int
  roleId    Int

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model PermissionAssignment {
  id            Int       @id @default(autoincrement())
  roleId        Int
  permissionId  Int

  role          Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission    Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}